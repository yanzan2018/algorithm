###630. Course Schedule III 
这道题与常见的meeting room不一样的是，会议的开始和结束时间都是固定的，而这里课程的开始时间是浮动的。
从两门课程开始分析，发现先挑结束时间早的课程
比如a = [100, 200]
b = [200, 1300]
先学习a，然后再学习b，可以在两门课的dealine之前学完两门课程；如果先学b，再学a，就只能学习b这一门课程。
所以先学习deadline靠前的课程是最有利的。
https://leetcode.com/problems/course-schedule-iii/solution/   参考各种case的分析，得出结论就是it is always profitable to take the course with a smaller end day prior to a course with a larger end day.


https://medium.com/@ChYuan/leetcode-no-630-course-schedule-iii-%E5%BF%83%E5%BE%97-hard-ab374aafc201

### 1094. Car Pooling
https://leetcode.com/problems/car-pooling/discuss/317611/C%2B%2BJava-O(n)-Thousand-and-One-Stops  这个方法非常smart，但是比如trips只有一个三元组，而且end_location非常的大，则这种方法则非常浪费空间。
用优先队列是一种更general的方法,空间复杂度最多是trips数组的大小。
思考这个问题的时候，显然需要先对trips按照开始站点排序，而且要在遍历的过程中把之前的结束站点和载的人数都记录下来。这个不可能只比较相邻的两个trip,因为有可能有多个trip的结束站点相同，或者晚开始的trip但是先到达终点，
这样只比较相邻的会丢失很多信息。所以用一个pq来记录每次trip的终点和人数,这样可以用来管理遍历过的站点,并且可以按照终点顺序排序。

252. Meeting Rooms    
253. Meeting Rooms II   类似car pooling，用一个pq来存储所有已召开会议的结束时间，这样来一个新会议时，就可以比较其开始时间和之前会议结束时间的关系。

 490. The Maze 
 bottom up 的dfs的小变种。（ 题外：dfs一般有visited数组来避免重复访问某个节点，但是对于树来说就没有，因为树之间的关系是单向的，不会回去。）
 这里设置visited数组和普通dfs的作用一样，是为了避免重复访问
 注意： 必须是球能够停下来的地方才算是能够到达。如果球仅仅经过该格子，但是停不下来，那么就不算能够到达。与普通dfs不一样的地方时，下一个dfs调用的开始点是球在目前位置朝某个方向滚动时的下一个停靠点,而不是目前位置的邻近节点。
在调用下一个dfs函数之前的位置变化，都是试探,直到到达停靠点后，即是新的start，然后开始下一轮的dfs。
 然后就分别用DFS尝试四个不同方向，有任何一个方向可以到达destination就直接返回true。
 这道题目也可以用top down的写法，这样设计的递归函数就没有返回值，需要用一个全局变量或是一个引用来记录是否已到达目的点。
 505. The Maze II 
 这道题不用visited，因为要遍历所有可能的路径来找到最小的步数，
 499. The Maze III 
 https://blog.csdn.net/magicbean2/article/details/78727575 
 http://hehejun.blogspot.com/2017/08/leetcodethe-maze-iii.html
